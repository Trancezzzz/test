--[[
    Extended Vulnerability Tests - Additional test modules
    
    This file contains additional specialized vulnerability tests that can be
    loaded alongside the main checker for even more comprehensive testing.
]]

local ExtendedTests = {}

-- 14. File System and Registry Access Tests
function ExtendedTests:testFileSystemAccess()
    print("\nüìÇ File System Access - Can read/write files outside sandbox")
    
    local fileFunctions = {
        {"readfile", "HIGH"},
        {"writefile", "CRITICAL"},
        {"appendfile", "HIGH"},
        {"makefolder", "MEDIUM"},
        {"delfolder", "HIGH"},
        {"delfile", "HIGH"},
        {"isfile", "LOW"},
        {"isfolder", "LOW"},
        {"listfiles", "MEDIUM"}
    }
    
    for _, funcData in ipairs(fileFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            -- Test if function can access files outside workspace
            local success, error = safeCall(function()
                if funcName == "readfile" then
                    return func("C:\\Windows\\System32\\drivers\\etc\\hosts")
                elseif funcName == "writefile" then
                    return func("test_vuln_file.txt", "test")
                elseif funcName == "listfiles" then
                    return func("C:\\")
                else
                    return func()
                end
            end)
            
            if success or (error and not string.find(error, "missing or nil")) then
                printResult(severity, funcName, "FAIL", "File system access available")
            else
                printResult(severity, funcName, "PASS", "File access blocked")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 15. Process and System Information Tests
function ExtendedTests:testProcessAccess()
    print("\n‚öôÔ∏è Process and System Access - Can interact with system processes")
    
    local processFunctions = {
        {"getprocesses", "HIGH"},
        {"getprocess", "MEDIUM"},
        {"killprocess", "CRITICAL"},
        {"getpid", "LOW"},
        {"getppid", "LOW"}
    }
    
    for _, funcData in ipairs(processFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            local success, result = safeCall(func)
            if success and result then
                printResult(severity, funcName, "FAIL", "Process access available")
            else
                printResult(severity, funcName, "PASS", "Process access blocked")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 16. DLL Injection and Code Injection Tests
function ExtendedTests:testCodeInjection()
    print("\nüíâ Code Injection - DLL injection and code manipulation")
    
    local injectionFunctions = {
        {"loadlibrary", "CRITICAL"},
        {"freelibrary", "HIGH"},
        {"getprocaddress", "HIGH"},
        {"virtualalloc", "CRITICAL"},
        {"virtualfree", "HIGH"},
        {"virtualprotect", "CRITICAL"},
        {"createthread", "CRITICAL"},
        {"resumethread", "HIGH"},
        {"suspendthread", "HIGH"}
    }
    
    for _, funcData in ipairs(injectionFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            printResult(severity, funcName, "FAIL", "Code injection capability available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 17. Registry Access Tests
function ExtendedTests:testRegistryAccess()
    print("\nüìã Registry Access - Can modify Windows registry")
    
    local registryFunctions = {
        {"reg_read", "HIGH"},
        {"reg_write", "CRITICAL"},
        {"reg_delete", "CRITICAL"},
        {"reg_create", "HIGH"},
        {"reg_enum", "MEDIUM"}
    }
    
    for _, funcData in ipairs(registryFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            local success, error = safeCall(function()
                if funcName == "reg_read" then
                    return func("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion", "ProgramFilesDir")
                else
                    return func()
                end
            end)
            
            if success or (error and not string.find(error, "missing or nil")) then
                printResult(severity, funcName, "FAIL", "Registry access available")
            else
                printResult(severity, funcName, "PASS", "Registry access blocked")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 18. Clipboard and Input Manipulation Tests
function ExtendedTests:testInputManipulation()
    print("\n‚å®Ô∏è Input Manipulation - Can control user input and clipboard")
    
    -- Test clipboard access
    local clipboardFunctions = {
        {"getclipboard", "MEDIUM"},
        {"setclipboard", "HIGH"}
    }
    
    for _, funcData in ipairs(clipboardFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            local success, result = safeCall(func)
            if funcName == "getclipboard" and success then
                printResult(severity, funcName, "FAIL", "Can read clipboard")
            elseif funcName == "setclipboard" then
                printResult(severity, funcName, "FAIL", "Can modify clipboard")
            else
                printResult(severity, funcName, "PASS", "Clipboard access blocked")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
    
    -- Test virtual input
    local inputFunctions = {
        {"keypress", "HIGH"},
        {"keyrelease", "HIGH"},
        {"mouse1press", "MEDIUM"},
        {"mouse1release", "MEDIUM"},
        {"mouse2press", "MEDIUM"},
        {"mouse2release", "MEDIUM"},
        {"mousemoveabs", "MEDIUM"},
        {"mousemoverel", "MEDIUM"}
    }
    
    for _, funcData in ipairs(inputFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            printResult(severity, funcName, "FAIL", "Virtual input available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 19. Cryptographic and Encoding Tests
function ExtendedTests:testCryptographicFunctions()
    print("\nüîê Cryptographic Functions - Encryption/decryption capabilities")
    
    local cryptoFunctions = {
        {"crypt.encrypt", "MEDIUM"},
        {"crypt.decrypt", "MEDIUM"},
        {"crypt.hash", "LOW"},
        {"crypt.base64encode", "LOW"},
        {"crypt.base64decode", "LOW"},
        {"crypt.generatekey", "MEDIUM"}
    }
    
    for _, funcData in ipairs(cryptoFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func
        
        if string.find(funcName, "crypt%.") then
            local cryptFunc = string.gsub(funcName, "crypt%.", "")
            func = crypt and crypt[cryptFunc]
        end
        
        if func then
            printResult(severity, funcName, "FAIL", "Cryptographic function available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 20. Advanced Metamethod and Hook Tests
function ExtendedTests:testAdvancedHooks()
    print("\nü™ù Advanced Hooks - Metamethod and function hooking")
    
    local hookFunctions = {
        {"hookfunction", "HIGH"},
        {"hookmetamethod", "HIGH"},
        {"getnamecallmethod", "MEDIUM"},
        {"setnamecallmethod", "HIGH"},
        {"getgc", "MEDIUM"},
        {"getgenv", "MEDIUM"},
        {"getrenv", "HIGH"},
        {"getsenv", "HIGH"}
    }
    
    for _, funcData in ipairs(hookFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            -- Test if we can hook critical functions
            if funcName == "hookfunction" then
                local success, error = safeCall(function()
                    local old = func(print, function() end)
                    func(print, old) -- Restore
                    return true
                end)
                
                if success then
                    printResult(severity, funcName, "FAIL", "Can hook functions")
                else
                    printResult(severity, funcName, "PASS", "Function hooking blocked")
                end
            else
                printResult(severity, funcName, "FAIL", "Hook function available")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 21. Console and Debug Access Tests
function ExtendedTests:testConsoleAccess()
    print("\nüñ•Ô∏è Console Access - Can access debug console")
    
    local consoleFunctions = {
        {"rconsolecreate", "MEDIUM"},
        {"rconsoledestroy", "LOW"},
        {"rconsoleclear", "LOW"},
        {"rconsoleinput", "MEDIUM"},
        {"rconsoleprint", "LOW"},
        {"rconsolename", "LOW"}
    }
    
    for _, funcData in ipairs(consoleFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            if funcName == "rconsolecreate" then
                local success, error = safeCall(func)
                if success then
                    printResult(severity, funcName, "FAIL", "Can create debug console")
                    -- Clean up
                    safeCall(function()
                        if rconsoledestroy then rconsoledestroy() end
                    end)
                else
                    printResult(severity, funcName, "PASS", "Console creation blocked")
                end
            else
                printResult(severity, funcName, "FAIL", "Console function available")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 22. WebSocket and Real-time Communication Tests
function ExtendedTests:testWebSocketCommunication()
    print("\nüîå WebSocket Communication - Real-time external communication")
    
    local wsSuccess, wsError = safeCall(function()
        if WebSocket then
            local ws = WebSocket.connect("wss://echo.websocket.org")
            if ws then
                ws:Close()
                return true
            end
        end
        return false
    end)
    
    if wsSuccess and wsError then
        printResult("HIGH", "WebSocket Connection", "FAIL", "Can establish WebSocket connections")
    else
        printResult("HIGH", "WebSocket Connection", "PASS", "WebSocket blocked or unavailable")
    end
    
    -- Test custom WebSocket implementations
    local customWsFunctions = {
        {"websocket_connect", "HIGH"},
        {"ws_connect", "HIGH"},
        {"socket_connect", "HIGH"}
    }
    
    for _, funcData in ipairs(customWsFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            printResult(severity, funcName, "FAIL", "Custom WebSocket function available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 23. Anti-Detection and Stealth Tests
function ExtendedTests:testAntiDetection()
    print("\nüëª Anti-Detection - Stealth and evasion capabilities")
    
    local stealthFunctions = {
        {"hide_process", "HIGH"},
        {"spoof_hwid", "HIGH"},
        {"change_identity", "MEDIUM"},
        {"bypass_detection", "HIGH"}
    }
    
    for _, funcData in ipairs(stealthFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            printResult(severity, funcName, "FAIL", "Anti-detection capability available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
    
    -- Test thread identity manipulation
    if setthreadidentity and getthreadidentity then
        local originalIdentity = getthreadidentity()
        local success, error = safeCall(function()
            setthreadidentity(7) -- CoreScript identity
            local newIdentity = getthreadidentity()
            setthreadidentity(originalIdentity) -- Restore
            return newIdentity == 7
        end)
        
        if success and error then
            printResult("HIGH", "Thread Identity Manipulation", "FAIL", "Can change thread identity to CoreScript level")
        else
            printResult("HIGH", "Thread Identity Manipulation", "PASS", "Thread identity changes blocked")
        end
    else
        printResult("HIGH", "Thread Identity Manipulation", "PASS", "Functions not available")
    end
end

-- 24. Hardware Information Access Tests
function ExtendedTests:testHardwareAccess()
    print("\nüñ•Ô∏è Hardware Information - Can access system hardware info")
    
    local hwFunctions = {
        {"gethwid", "MEDIUM"},
        {"getcpuid", "MEDIUM"},
        {"getgpuinfo", "LOW"},
        {"getraminfo", "LOW"},
        {"getdiskinfo", "LOW"}
    }
    
    for _, funcData in ipairs(hwFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            local success, result = safeCall(func)
            if success and result then
                printResult(severity, funcName, "FAIL", "Hardware info accessible")
            else
                printResult(severity, funcName, "PASS", "Hardware access blocked")
            end
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 25. Script Decompilation and Analysis Tests
function ExtendedTests:testScriptAnalysis()
    print("\nüîç Script Analysis - Can decompile and analyze scripts")
    
    local analysisFunctions = {
        {"decompile", "MEDIUM"},
        {"getscript", "MEDIUM"},
        {"getscripts", "MEDIUM"},
        {"getsource", "MEDIUM"},
        {"getbytecode", "HIGH"}
    }
    
    for _, funcData in ipairs(analysisFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            printResult(severity, funcName, "FAIL", "Script analysis capability available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

return ExtendedTests
