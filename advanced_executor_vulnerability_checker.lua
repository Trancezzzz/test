--[[
    Advanced Executor Vulnerability Checker v2.0
    
    This script performs comprehensive security testing on Roblox executors
    to identify potential vulnerabilities that could be exploited by malicious actors.
    
    Features:
    - Comprehensive API vulnerability testing
    - Advanced bypass detection
    - Memory manipulation tests
    - Environment escape detection
    - Detailed reporting with severity levels
    - Modular test structure for easy expansion
]]

local AdvancedVulnChecker = {}
AdvancedVulnChecker.__index = AdvancedVulnChecker

-- Configuration
local CONFIG = {
    ENABLE_DANGEROUS_TESTS = true, -- Set to false to skip potentially harmful tests
    DETAILED_OUTPUT = true,
    TEST_TIMEOUT = 5,
    ROBUX_TEST_ASSET_ID = 1589257, -- Free T-shirt for testing
}

-- Test results tracking
local TestResults = {
    critical = 0,
    high = 0,
    medium = 0,
    low = 0,
    passed = 0,
    unknown = 0,
    total = 0
}

local VulnerableAPIs = {}
local TestCategories = {}

-- Utility functions
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    return success, result
end

local function addVulnerableAPI(api)
    table.insert(VulnerableAPIs, api)
end

local function printResult(severity, test_name, status, details)
    TestResults.total = TestResults.total + 1
    local icon = ""
    local color_func = print
    
    if status == "PASS" then
        icon = "‚úÖ"
        TestResults.passed = TestResults.passed + 1
        color_func = print
    elseif status == "FAIL" then
        if severity == "CRITICAL" then
            icon = "üî¥"
            TestResults.critical = TestResults.critical + 1
        elseif severity == "HIGH" then
            icon = "üü†"
            TestResults.high = TestResults.high + 1
        elseif severity == "MEDIUM" then
            icon = "üü°"
            TestResults.medium = TestResults.medium + 1
        else
            icon = "‚õî"
            TestResults.low = TestResults.low + 1
        end
        color_func = warn
    else
        icon = "‚è∫Ô∏è"
        TestResults.unknown = TestResults.unknown + 1
        color_func = print
    end
    
    local message = string.format("  %s [%s] %s", icon, severity, test_name)
    if details then
        message = message .. " | " .. details
    end
    
    color_func(message)
end

-- Test Categories

-- 1. HTTP and API Vulnerability Tests
function AdvancedVulnChecker:testHttpRbxApiService()
    print("\nüåê HttpRbxApiService - Critical API that can access authenticated Roblox endpoints")
    
    local tests = {
        {"PostAsync", "CRITICAL"},
        {"PostAsyncFullUrl", "CRITICAL"},
        {"GetAsync", "CRITICAL"},
        {"GetAsyncFullUrl", "CRITICAL"},
        {"RequestAsync", "CRITICAL"}
    }
    
    for _, test in ipairs(tests) do
        local method, severity = test[1], test[2]
        local success, error = safeCall(function()
            return game:GetService("HttpRbxApiService")[method]()
        end)
        
        if error == "Argument 1 missing or nil" then
            printResult(severity, method, "FAIL", "Function accessible - can send authenticated requests")
            addVulnerableAPI('game:GetService("HttpRbxApiService"):' .. method .. '()')
        else
            printResult(severity, method, "PASS", "Function blocked")
        end
    end
end

-- 2. Browser and External Access Tests
function AdvancedVulnChecker:testBrowserServices()
    print("\nüåç Browser Services - Can execute external code and open malicious URLs")
    
    local services = {
        {"BrowserService", {
            {"EmitHybridEvent", "HIGH"},
            {"ExecuteJavaScript", "CRITICAL"},
            {"OpenBrowserWindow", "HIGH"},
            {"OpenNativeOverlay", "HIGH"},
            {"ReturnToJavaScript", "MEDIUM"},
            {"SendCommand", "HIGH"}
        }},
        {"GuiService", {
            {"OpenBrowserWindow", "HIGH"},
            {"OpenNativeOverlay", "HIGH"}
        }}
    }
    
    for _, serviceData in ipairs(services) do
        local serviceName, methods = serviceData[1], serviceData[2]
        
        for _, methodData in ipairs(methods) do
            local method, severity = methodData[1], methodData[2]
            local success, error = safeCall(function()
                return game:GetService(serviceName)[method]()
            end)
            
            if error == "Argument 1 missing or nil" then
                printResult(severity, serviceName .. ":" .. method, "FAIL", "Can execute browser commands")
                addVulnerableAPI('game:GetService("' .. serviceName .. '"):' .. method .. '()')
            else
                printResult(severity, serviceName .. ":" .. method, "PASS", "Function blocked")
            end
        end
    end
end

-- 3. Financial and Marketplace Vulnerabilities
function AdvancedVulnChecker:testMarketplaceService()
    print("\nüí∞ MarketplaceService - Can drain Robux and make unauthorized purchases")
    
    local tests = {
        {"GetRobuxBalance", "CRITICAL", "balance"},
        {"PerformPurchase", "CRITICAL", "args"},
        {"PerformPurchaseV2", "CRITICAL", "args"},
        {"PromptBundlePurchase", "HIGH", "args"},
        {"PromptGamePassPurchase", "HIGH", "args"},
        {"PromptProductPurchase", "HIGH", "args"},
        {"PromptPurchase", "HIGH", "args"},
        {"PromptRobloxPurchase", "CRITICAL", "args"},
        {"PromptThirdPartyPurchase", "HIGH", "args"}
    }
    
    for _, test in ipairs(tests) do
        local method, severity, testType = test[1], test[2], test[3]
        
        if testType == "balance" then
            local success, result = safeCall(function()
                return game:GetService("MarketplaceService")[method]()
            end)
            
            if success and type(result) == "number" then
                printResult(severity, method, "FAIL", "Returned balance: " .. tostring(result))
                addVulnerableAPI('game:GetService("MarketplaceService"):' .. method .. '()')
            else
                printResult(severity, method, "PASS", "Function blocked or failed")
            end
        else
            local success, error = safeCall(function()
                return game:GetService("MarketplaceService")[method]()
            end)
            
            if error == "Argument 1 missing or nil" then
                printResult(severity, method, "FAIL", "Can initiate purchases")
                addVulnerableAPI('game:GetService("MarketplaceService"):' .. method .. '()')
            else
                printResult(severity, method, "PASS", "Function blocked")
            end
        end
    end
end

-- 4. Core System Access Tests
function AdvancedVulnChecker:testCoreSystemAccess()
    print("\nüîß Core System Access - Can manipulate core Roblox systems")
    
    -- ScriptContext tests
    local success, error = safeCall(function()
        return game:GetService("ScriptContext"):AddCoreScriptLocal()
    end)
    
    if error == "Argument 1 missing or nil" then
        printResult("CRITICAL", "ScriptContext:AddCoreScriptLocal", "FAIL", "Can inject CoreScripts")
        addVulnerableAPI('game:GetService("ScriptContext"):AddCoreScriptLocal()')
    else
        printResult("CRITICAL", "ScriptContext:AddCoreScriptLocal", "PASS", "Function blocked")
    end
    
    -- DataModel tests
    local dataModelTests = {
        {"Load", "HIGH"},
        {"OpenScreenshotsFolder", "MEDIUM"},
        {"OpenVideosFolder", "MEDIUM"}
    }
    
    for _, test in ipairs(dataModelTests) do
        local method, severity = test[1], test[2]
        local success, error = safeCall(function()
            if method == "OpenVideosFolder" then
                return game:GetService("CoreGui")[method]()
            else
                return game[method]()
            end
        end)
        
        if method == "Load" then
            if error == "Argument 1 missing or nil" then
                printResult(severity, "DataModel:" .. method, "FAIL", "Can load external places")
            else
                printResult(severity, "DataModel:" .. method, "PASS", "Function blocked")
            end
        else
            if success then
                printResult(severity, "DataModel:" .. method, "FAIL", "Can access file system")
            else
                printResult(severity, "DataModel:" .. method, "PASS", "Function blocked")
            end
        end
    end
end

-- 5. Message Bus and IPC Tests
function AdvancedVulnChecker:testMessageBusService()
    print("\nüì° MessageBusService - Critical for RCE vulnerabilities")
    
    local tests = {
        {"Call", "CRITICAL"},
        {"GetLast", "HIGH"},
        {"GetMessageId", "MEDIUM"},
        {"GetProtocolMethodRequestMessageId", "HIGH"},
        {"GetProtocolMethodResponseMessageId", "HIGH"},
        {"MakeRequest", "CRITICAL"},
        {"Publish", "HIGH"},
        {"PublishProtocolMethodRequest", "CRITICAL"},
        {"PublishProtocolMethodResponse", "CRITICAL"},
        {"Subscribe", "HIGH"},
        {"SubscribeToProtocolMethodRequest", "CRITICAL"},
        {"SubscribeToProtocolMethodResponse", "CRITICAL"}
    }
    
    for _, test in ipairs(tests) do
        local method, severity = test[1], test[2]
        local success, error = safeCall(function()
            return game:GetService("MessageBusService")[method]()
        end)
        
        if error == "Argument 1 missing or nil" then
            printResult(severity, method, "FAIL", "IPC communication possible")
            addVulnerableAPI('game:GetService("MessageBusService"):' .. method .. '()')
        else
            printResult(severity, method, "PASS", "Function blocked")
        end
    end
end

-- 6. Advanced HTTP Testing
function AdvancedVulnChecker:testAdvancedHttpMethods()
    print("\nüîó Advanced HTTP Methods - Custom executor functions and bypasses")
    
    -- Test HttpService RequestInternal
    local success, error = safeCall(function()
        return game:GetService("HttpService"):RequestInternal()
    end)
    
    if error == "Argument 1 missing or nil" then
        printResult("CRITICAL", "HttpService:RequestInternal", "FAIL", "Can send authenticated requests")
        addVulnerableAPI('game:GetService("HttpService"):RequestInternal()')
    else
        printResult("CRITICAL", "HttpService:RequestInternal", "PASS", "Function blocked")
    end
    
    -- Test OpenCloudService
    success, error = safeCall(function()
        return game:GetService("OpenCloudService"):HttpRequestAsync()
    end)
    
    if error == "Argument 1 missing or nil" then
        printResult("CRITICAL", "OpenCloudService:HttpRequestAsync", "FAIL", "Can access OpenCloud APIs")
        addVulnerableAPI('game:GetService("OpenCloudService"):HttpRequestAsync()')
    else
        printResult("CRITICAL", "OpenCloudService:HttpRequestAsync", "PASS", "Function blocked")
    end
    
    -- Test OmniRecommendationsService
    success, error = safeCall(function()
        return game:GetService("OmniRecommendationsService"):MakeRequest()
    end)
    
    if error == "Argument 1 missing or nil" then
        printResult("HIGH", "OmniRecommendationsService:MakeRequest", "FAIL", "Can make API requests")
        addVulnerableAPI('game:GetService("OmniRecommendationsService"):MakeRequest()')
    else
        printResult("HIGH", "OmniRecommendationsService:MakeRequest", "PASS", "Function blocked")
    end
    
    -- Test custom executor HTTP functions
    self:testCustomHttpFunctions()
end

-- 7. Custom HTTP Functions Testing
function AdvancedVulnChecker:testCustomHttpFunctions()
    print("\nüåê Custom Executor HTTP Functions - Testing for authenticated requests")
    
    local httpFunctions = {
        {"request", "CRITICAL"},
        {"http_request", "CRITICAL"},
        {"syn.request", "CRITICAL"},
        {"game.HttpGet", "HIGH"},
        {"game.HttpPost", "CRITICAL"},
        {"game.HttpGetAsync", "HIGH"},
        {"game.HttpPostAsync", "CRITICAL"}
    }
    
    for _, funcData in ipairs(httpFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        
        if funcName == "request" or funcName == "http_request" then
            local success, error = safeCall(function()
                local func = getgenv()[funcName] or _G[funcName]
                if func then
                    return func({
                        Url = "https://economy.roblox.com/v1/user/currency",
                        Method = "GET"
                    })
                else
                    error("Function not found")
                end
            end)
            
            if success and error and error.Body then
                local body = tostring(error.Body)
                if string.find(body, '"robux":') then
                    printResult(severity, funcName, "FAIL", "Returned Robux balance: " .. body)
                    addVulnerableAPI(funcName .. '()')
                else
                    printResult(severity, funcName, "PASS", "Request blocked or unauthenticated")
                end
            elseif error == "Function not found" then
                printResult(severity, funcName, "UNKNOWN", "Function not supported")
            else
                printResult(severity, funcName, "PASS", "Function blocked")
            end
            
        elseif string.find(funcName, "game%.") then
            local method = string.gsub(funcName, "game%.", "")
            
            if method == "HttpPost" and CONFIG.ENABLE_DANGEROUS_TESTS then
                -- Test purchasing free item
                local success, result = safeCall(function()
                    return game[method]("https://economy.roblox.com/v1/purchases/products/41762", 
                                      '{"expectedCurrency":1,"expectedPrice":0,"expectedSellerId":116444}')
                end)
                
                task.wait(1) -- Wait for potential purchase
                
                if game:GetService("MarketplaceService"):PlayerOwnsAsset(game.Players.LocalPlayer, CONFIG.ROBUX_TEST_ASSET_ID) then
                    printResult(severity, funcName, "FAIL", "Successfully made authenticated purchase")
                    addVulnerableAPI(funcName .. '()')
                else
                    printResult(severity, funcName, "PASS", "Purchase blocked or failed")
                end
            else
                local success, result = safeCall(function()
                    return game[method]("https://economy.roblox.com/v1/user/currency")
                end)
                
                if success and result and string.find(tostring(result), '"robux":') then
                    printResult(severity, funcName, "FAIL", "Returned authenticated data")
                    addVulnerableAPI(funcName .. '()')
                else
                    printResult(severity, funcName, "PASS", "Function blocked or unauthenticated")
                end
            end
        end
    end
end

-- 8. Media and File System Tests
function AdvancedVulnChecker:testMediaAndFileSystem()
    print("\nüìÅ Media and File System Access - Can manipulate user files")
    
    local tests = {
        {"CoreGui:TakeScreenshot", "MEDIUM", function() return game:GetService("CoreGui"):TakeScreenshot() end},
        {"CoreGui:ToggleRecording", "MEDIUM", function() return game:GetService("CoreGui"):ToggleRecording() end}
    }
    
    for _, test in ipairs(tests) do
        local name, severity, func = test[1], test[2], test[3]
        local success, error = safeCall(func)
        
        if success then
            printResult(severity, name, "FAIL", "Can access media functions")
        else
            printResult(severity, name, "PASS", "Function blocked")
        end
    end
end

-- 9. Player Reporting and Abuse Tests
function AdvancedVulnChecker:testPlayerReporting()
    print("\nüë§ Player Reporting System - Can report or get players banned")
    
    local tests = {
        {"ReportAbuse", "HIGH"},
        {"ReportAbuseV3", "HIGH"}
    }
    
    for _, test in ipairs(tests) do
        local method, severity = test[1], test[2]
        local success, error = safeCall(function()
            return game:GetService("Players")[method]()
        end)
        
        if error == "Argument 1 missing or nil" then
            printResult(severity, "Players:" .. method, "FAIL", "Can report players")
            addVulnerableAPI('game:GetService("Players"):' .. method .. '()')
        else
            printResult(severity, "Players:" .. method, "PASS", "Function blocked")
        end
    end
end

-- 10. Environment Escape and Bypass Tests
function AdvancedVulnChecker:testEnvironmentEscapes()
    print("\nüîì Environment Escape Tests - Advanced bypass detection")
    
    if #VulnerableAPIs == 0 then
        printResult("HIGH", "Environment Escape", "PASS", "No vulnerable APIs to test bypass with")
        return
    end
    
    local testAPI = VulnerableAPIs[1]
    
    -- Test basic loadstring bypass
    local success1, error1 = safeCall(function()
        return loadstring(testAPI)()
    end)
    
    -- Test environment escape via metamethod hooking
    local success2, error2
    safeCall(function()
        if hookmetamethod then
            local old_index
            old_index = hookmetamethod(game, "__index", function(self, key)
                task.spawn(function()
                    if setthreadidentity then setthreadidentity(7) end
                    task.wait(0.1)
                    success2, error2 = safeCall(function()
                        return loadstring(testAPI)()
                    end)
                end)
                hookmetamethod(game, "__index", old_index)
                return old_index(self, key)
            end)
            game.Workspace -- Trigger the hook
        end
    end)
    
    task.wait(0.2)
    
    if error1 == error2 then
        printResult("HIGH", "Environment Escape via Metamethods", "PASS", "Bypass prevented")
    else
        if error2 == "Argument 1 missing or nil" then
            printResult("CRITICAL", "Environment Escape via Metamethods", "FAIL", "Can bypass security via metamethod hooking")
        else
            printResult("MEDIUM", "Environment Escape via Metamethods", "UNKNOWN", "Inconclusive results")
        end
    end
    
    -- Test getrenv bypass
    safeCall(function()
        if getrenv and getgenv then
            getrenv().loadstring = getgenv().loadstring
            getrenv().getgenv = getgenv().getgenv
            local success3, error3 = safeCall(function()
                return getrenv().loadstring(testAPI)()
            end)
            
            if error3 == "Argument 1 missing or nil" then
                printResult("HIGH", "Environment Escape via getrenv", "FAIL", "Can bypass via getrenv manipulation")
            else
                printResult("HIGH", "Environment Escape via getrenv", "PASS", "getrenv bypass prevented")
            end
        else
            printResult("HIGH", "Environment Escape via getrenv", "UNKNOWN", "getrenv not available")
        end
    end)
end

-- 11. Memory and Process Manipulation Tests
function AdvancedVulnChecker:testMemoryManipulation()
    print("\nüß† Memory and Process Manipulation - Advanced executor features")
    
    local memoryFunctions = {
        {"readmem", "CRITICAL"},
        {"writemem", "CRITICAL"},
        {"allocmem", "HIGH"},
        {"freemem", "MEDIUM"},
        {"protectmem", "HIGH"},
        {"scanmem", "MEDIUM"},
        {"setrawmetatable", "HIGH"},
        {"getrawmetatable", "MEDIUM"}
    }
    
    for _, funcData in ipairs(memoryFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            local success, error = safeCall(func)
            if success or (error and not string.find(error, "missing or nil")) then
                printResult(severity, funcName, "FAIL", "Memory manipulation function available")
            else
                printResult(severity, funcName, "PASS", "Function blocked or restricted")
            end
        else
            printResult(severity, funcName, "UNKNOWN", "Function not available")
        end
    end
end

-- 12. Advanced Executor Function Tests
function AdvancedVulnChecker:testAdvancedExecutorFunctions()
    print("\n‚ö° Advanced Executor Functions - Dangerous capabilities")
    
    local dangerousFunctions = {
        {"loadfile", "HIGH"},
        {"dofile", "HIGH"},
        {"require", "MEDIUM"},
        {"setfenv", "HIGH"},
        {"getfenv", "MEDIUM"},
        {"debug.getupvalue", "HIGH"},
        {"debug.setupvalue", "CRITICAL"},
        {"debug.getlocal", "MEDIUM"},
        {"debug.setlocal", "HIGH"},
        {"debug.getregistry", "HIGH"},
        {"newcclosure", "HIGH"},
        {"islclosure", "LOW"},
        {"iscclosure", "LOW"},
        {"checkcaller", "MEDIUM"},
        {"cloneref", "MEDIUM"},
        {"compareinstances", "LOW"}
    }
    
    for _, funcData in ipairs(dangerousFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func
        
        if string.find(funcName, "debug%.") then
            local debugFunc = string.gsub(funcName, "debug%.", "")
            func = debug and debug[debugFunc]
        else
            func = getgenv()[funcName] or _G[funcName]
        end
        
        if func then
            printResult(severity, funcName, "FAIL", "Dangerous function available")
        else
            printResult(severity, funcName, "PASS", "Function not available")
        end
    end
end

-- 13. Network and Communication Tests
function AdvancedVulnChecker:testNetworkCommunication()
    print("\nüåê Network Communication - External connectivity tests")
    
    -- Test WebSocket connections
    safeCall(function()
        if WebSocket then
            printResult("HIGH", "WebSocket", "FAIL", "WebSocket connections available")
        else
            printResult("HIGH", "WebSocket", "PASS", "WebSocket not available")
        end
    end)
    
    -- Test TCP/UDP sockets
    local socketFunctions = {
        {"socket", "CRITICAL"},
        {"tcp", "HIGH"},
        {"udp", "HIGH"}
    }
    
    for _, funcData in ipairs(socketFunctions) do
        local funcName, severity = funcData[1], funcData[2]
        local func = getgenv()[funcName] or _G[funcName]
        
        if func then
            printResult(severity, funcName .. " sockets", "FAIL", "Raw socket access available")
        else
            printResult(severity, funcName .. " sockets", "PASS", "Socket access blocked")
        end
    end
end

-- Main execution function
function AdvancedVulnChecker:runAllTests()
    print("üîç Advanced Executor Vulnerability Checker v2.0")
    print("Executor: " .. tostring(identifyexecutor and identifyexecutor() or "Unknown"))
    print("=" .. string.rep("=", 60))
    print("üî¥ Critical | üü† High | üü° Medium | ‚õî Low | ‚úÖ Pass | ‚è∫Ô∏è Unknown")
    print("=" .. string.rep("=", 60))
    
    -- Run all test categories
    self:testHttpRbxApiService()
    self:testBrowserServices()
    self:testMarketplaceService()
    self:testCoreSystemAccess()
    self:testMessageBusService()
    self:testAdvancedHttpMethods()
    self:testMediaAndFileSystem()
    self:testPlayerReporting()
    self:testMemoryManipulation()
    self:testAdvancedExecutorFunctions()
    self:testNetworkCommunication()
    self:testEnvironmentEscapes()
    
    -- Generate final report
    self:generateReport()
end

function AdvancedVulnChecker:generateReport()
    print("\n" .. string.rep("=", 60))
    print("üìä VULNERABILITY ASSESSMENT REPORT")
    print(string.rep("=", 60))
    
    local totalVulns = TestResults.critical + TestResults.high + TestResults.medium + TestResults.low
    local securityScore = math.floor((TestResults.passed / TestResults.total) * 100)
    
    print(string.format("üéØ Security Score: %d%% (%d/%d tests passed)", 
          securityScore, TestResults.passed, TestResults.total))
    print("")
    
    print("üìà Vulnerability Breakdown:")
    print(string.format("  üî¥ Critical: %d", TestResults.critical))
    print(string.format("  üü† High: %d", TestResults.high))
    print(string.format("  üü° Medium: %d", TestResults.medium))
    print(string.format("  ‚õî Low: %d", TestResults.low))
    print(string.format("  ‚úÖ Passed: %d", TestResults.passed))
    print(string.format("  ‚è∫Ô∏è Unknown: %d", TestResults.unknown))
    
    if #VulnerableAPIs > 0 then
        print("\n‚ö†Ô∏è  VULNERABLE APIs DETECTED:")
        for i, api in ipairs(VulnerableAPIs) do
            print("  " .. i .. ". " .. api)
        end
    end
    
    print("\nüõ°Ô∏è  SECURITY RECOMMENDATIONS:")
    if TestResults.critical > 0 then
        print("  ‚Ä¢ URGENT: Critical vulnerabilities detected - executor is highly unsafe")
        print("  ‚Ä¢ Avoid using this executor for sensitive operations")
    elseif TestResults.high > 0 then
        print("  ‚Ä¢ WARNING: High-risk vulnerabilities present")
        print("  ‚Ä¢ Use caution when running untrusted scripts")
    elseif TestResults.medium > 0 then
        print("  ‚Ä¢ CAUTION: Medium-risk vulnerabilities found")
        print("  ‚Ä¢ Generally safe but be aware of potential risks")
    else
        print("  ‚Ä¢ ‚úÖ Executor appears to have good security measures")
    end
    
    print("\nüìã Test completed at: " .. os.date("%Y-%m-%d %H:%M:%S"))
    print(string.rep("=", 60))
end

-- Initialize and run the checker
local checker = setmetatable({}, AdvancedVulnChecker)
checker:runAllTests()
